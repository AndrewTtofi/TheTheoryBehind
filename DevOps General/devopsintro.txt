Introduction to DevOps->https://www.youtube.com/watch?v=j5Zsa_eOXeY
	DevOps Definition:
		A metholodgy that helps engineering teams build products by continuously getting user feedback.
		The main purpose of DevOps is that through the user feedback you are creating a new version of your product, instead of releasing a new product (e.g Call of Duty 1 to Call of Duty 2)
		you implement your current version which allows the user to continue working with the current product which is upgraded.

	DevOps Lifecycle:
		Plan:
			Take a set of features you want to develop
		Code:
			Developers build those features
		Build:
			Build those features and update the code. (for games lets say is the version build: e.g 1.0.1 , 1.0.2 etc)
		Test:
			Test those features through an automated system (CI: Continuous Intergration) or manual testing (QA: Quality Assurance)
		Release:
			Continuous Deployment: The release is made in segments (lets say 1% of your users) and then feedback is taken
			Once the feedback is processed it will continue the deployment to more users.
		Deploy:
			The release is then released and deployed to all users, which makes it publicly available.
			e.g. for a mobile app on the App Store, the team would gather the artifacts, buld them and submit them to the App Store.
				 then the App Store woudl review them and then release them as the form of a new update.
		Operate:
			Configure things dealing with architectural problems, make sure enough resources exist for the load, adding more servers if required.
		Monitor:
			Ensure that the released version is working as expected.


		Once all the above steps are completed then the cycle once again runs with the start of a new Plan.

	DevOps Engineering:
		Practical use of DevOps within software engineering teams. Being able to build, test, release and monitor applications.

	DevOps Engineering Pillars:
		1. Pull Request Automation
				Helps Developers build things faster, and helps them understand whether their proposed change is good, faster.
		2. Deployment Automation
				Deployment automation, helps you deploy your code in a way that users dont complain.
		3. Application Performance Management
				Automation around making sure things are healthy.

		Pull Request Automation:
			-Developers share code changes using git tools like GitHub, GitLab and Bitbucket
			-A set of code changes in git tools is called a "pull request" or "merge request"
			-If pull requests are approved, the code changes can go into the main codebase

			What can be automated?
				Continuous Integration (CI)
				Per change ephemeral environments
				Automated security scanning
				Notifications to reviewers

			Goal as DevOps Engineer:
				Help developer change proposals get reviewed and merged within 24 hours of when they are made.

		Deployment Automation:
			-Deploy a feature to a certain set of users as a final test before rolling it out publically
			-Starting new versions of services without causting downtime
			-Rolling back to the prior version in case something go wrong

			When deploying code many things can go wrong. Goal as a DevOps Engineer:
				Have the right tools in place that facilitate deployment without having to have much custom code.


		Application Performance Manager:
			-Metrics: numeric measurements of key numbers in production
			-Logging: text descriptions of what is happening during processing
			-Monitoring: take metrics and logs to convert them into health metrics
			-Alerting: If monitoring detects a problem, it notifies developers



		Examples of DevOps Engineering:
			1.Scenario 1
				A startup that with no users building a web application.
				Since we do not really care about downtime or compare the new code behaviour with the old one via customer feedback, only the first pillar will be applied for our code.
				We can use in this case free software that will provide us with all the appropriate tools:
					Github
					Netlify/Vercel
					LayerCI


			2. Scenario 2
				Team building an application for 10 enterprise customers
				Since downtime matters a lot, we need to focus on the 3rd pillar that will ensure downtimes are minimatized and does not cause any problem to the daily operation of 
				the companies.
				We can use in this case the following software:
					Github
					Sentry
					PagerDuty
					CodeCov
					Bitrise/CircleCI


			3. Scenario 3
				Heavy Traffic social media application like Reddit
				We can use the following software:
					Github Enterprise, Sentry, Elastic Search/Logstash/Kibana/Pingdom, Launch Darkly, Terraform



			Conclusion:
				DevOps Engineering is vital for engineering teams, especialy as the product matures.

	Testing:
		Test Driven Development Definition:
			Known as TDD, it is a coding methodology where tests are written before code is written.
			Monolithic Tests that were established in factories (Example with a coffee maker):
				Unit Tests (insure individual components work - does the plug work, does the heater heats up? etc)
				Intergration tests (ensure components work together - does the heater heat the water in the tank? do the button work with the parts? etc)
				System (end to end) tests (ensure everything works together)
				Acceptance tests (customer feedbacks)

		TTD Goals:
			Know when something breaks and where
			Know that the whole system is working properly

		Workflow without TDD:
			1. Choose something to work on
			2. Build it based on specifications
			3. Test it with small scripts

			VS
		Workflow with TDD:
			1. Choose something to work on
			2. Write tests that would pass if product works
			3. Keep building until all tests pass

		Results are the same regardless of the method - TDD forces you to prioritize tasks.

	What is CI (Continuous Integration):
		CI Definition:
			Developers pushing many small changes to a central repository per day. These changes are verified by an automatic software that runs comprehensive tests to
			ensure no major issues are seen by customers.

		Top 3 Benefits of CI:
			1. CI is the first step of DevOps automation and helps with code collaboration
			2. CI helps improve developer speed without breaking existing code
			3. CI helps reduce customer churn and user satisfaction by preventing broken code from publishing

		How do you imnplement CI into your existing code?
			First of all how the flow works for Developers:
				- Master Branch -> where all the code exists that will later on be pushed to the users
				- Feature Branch -> the developers make a new branch that will include all the changes and additions
				- Feature Branch will be murged to the Master Branch. 
				Actual Flow:
					Devs work on the feature Branch. The devs will take the files that are current, or for a specific set of time.
					They will make changes and additions to that feature branch (each working on their own branch).
					Then they will push it back to their main repository.
					Repository will then run the CI, that will be configured on the repository side.
					It will run all of the tests that the programmers/devs have defined.
					The results of those tests will be attached to the pull request.
					The pull request is the developer asking to take their code and to merge it into the central repository that the users will be shown.
					So you take the feature branch, and you commit it at the end of what will be the next deployment.

			CI is a vital tool for developer collaboration. Increase collaboration, prevent errors and increase user satisfaction.  
		
	Code Coverage:
		Methodology that quantitatively measures how comprehensive a code base's tests are. Increasing code coverage often increases stability and reduces bugs.
		Code is being structured into 3 main lines:
			Branch Lines: They change the flow of the program
			Syntax Lines: They are the lines were we close a loop for example or an if -> {}
			Logic Lines: If removed the would change the behaviour of the program

		Code Coverage Formula:
		Definition-> the outcome produced by the formula is the total percentage of test coverage
			total # of non-syntax lines with test / total # of non-syntax lines

		Branch Coverage Definition:
			A very relevant concept to code coverage is "branch coverage" - instead of measuring how many lines
			of code, it measures groups of lines.

		When to care about code coverage:
			Your product has users and those users might leave if they are affected by bugs
			You are working with developers that are not immediately trustworthy like contractors/inters
			You are working on a very large code base with many testable components

		Common mistake: too many tests for uncertain features

		Rules for Code Coverage:
			Rule1: code coverage must not decrease

			Rule2: code owners for test files



	Linting:
		Definition:
			Linters look at a program's source code and find problems automatically. They are a common feature of pull request
			automation because they ensure that "obvious" bugs do not make it to production.

		

	